
options {
    STATIC = false;
    UNICODE_INPUT = true;
}

PARSER_BEGIN(MsftCsvParser)
package net.emaze.csv.reader;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.io.Reader;
 
public class MsftCsvParser implements CsvParser {
    
}

PARSER_END(MsftCsvParser)

<DEFAULT> TOKEN: { 
      < FIELD_DELIMITER: ";" > 
    | < NL: (["\n", "\r"])+ >
    | < START_QUOTE: "\"" > : IN_QUOTE
    | < TEXTDATA: (~[";","\r","\n","\""])* >
}

<IN_QUOTE> TOKEN:
{
      <QUOTED_QUOTE: "\"\"">
    | <END_QUOTE: "\""  > : DEFAULT
    | <QUOTED_TEXTDATA: (~["\""])* >
}


List<String> record():
{
    List<String> out = new ArrayList<String>();
    String current = "";
}
{
      (<EOF> {return null;})
    | (
        (current=nonEmptyOrQuotedField())?
        (
            (<FIELD_DELIMITER>        { out.add(current); current="";})
          | ((<NL> | <EOF> )  {out.add(current); return out;})
        )
      )*
}

String nonEmptyOrQuotedField():
{
    StringBuilder sb = new StringBuilder();
    Token current;
}
{
    (
        (<START_QUOTE> (current=<QUOTED_QUOTE>{sb.append("\""); }|current=<QUOTED_TEXTDATA>{sb.append(current.image); })*<END_QUOTE>)
        | (current=<TEXTDATA>{sb.append(current.image); })
    )
    { return sb.toString(); }
}
